{"version":3,"sources":["assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/styles.ts","services/api.ts","hooks/useTransactions.tsx","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","styles/global.ts","components/NewTransactionModal/styles.ts","assets/close.svg","components/NewTransactionModal/index.tsx","App.tsx","index.tsx"],"names":["Container","styled","div","api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Summary","summary","reduce","acc","type","deposits","amount","total","withdraws","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","map","title","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","GlobalStyle","createGlobalStyle","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34755356.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.efc003fe.svg\";","import styled from 'styled-components';\n\nexport const Container = styled.div `\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    gap: 2rem;\n    margin-top: -10rem;\n\n    div {\n        background: var(--shape);\n        padding: 1.5rem 2rem;\n        border-radius: 0.25rem;\n        color: var(--text-title);\n\n        header {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n\n        strong {\n            display: block;\n            margin-top: 1rem;\n            font-size: 2rem;\n            font-weight: 500;\n            line-height: 3rem;\n        }\n\n        &.highlight-background {\n            background: var(--green);\n            color: #fff;\n        }\n    }\n`;","import axios from 'axios';\n\nexport const api = axios.create({\n    baseURL: 'http://localhost:3000/api',\n})","import {createContext, useEffect, useState, ReactNode, useContext } from 'react';\nimport { api } from '../services/api';\n\ninterface Transaction {\n    id: number;\n    title: string;\n    amount: number;\n    type: string;\n    category: string;\n    createdAt: string;\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\n\ninterface TransactionsProviderProps {\n    children: ReactNode;\n}\n\ninterface TransactionsContextData {\n    transactions: Transaction[];\n    createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\n\nconst TransactionsContext = createContext<TransactionsContextData>({} as TransactionsContextData);\n\nexport function TransactionsProvider( {children}: TransactionsProviderProps ){\n\n    const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n    useEffect(() => {\n        api.get('transactions')\n        .then(response => setTransactions(response.data.transactions))\n    }, []);\n\n    async function createTransaction(transactionInput: TransactionInput) {\n        const response = await api.post('/transactions', {\n            ...transactionInput,\n            createdAt: new Date(),\n        })\n\n        const { transaction } = response.data;\n\n        setTransactions([\n            ...transactions,\n            transaction,\n        ]);\n    }\n\n    return (\n        <TransactionsContext.Provider value = {{ transactions, createTransaction }}>\n            {children}\n        </TransactionsContext.Provider>\n    );\n\n}\n\nexport function useTransactions(){\n    const context = useContext(TransactionsContext);\n\n    return context;\n}","import incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport totalImg from '../../assets/total.svg';\nimport { Container } from \"./styles\";\nimport { useTransactions } from '../../hooks/useTransactions';\n\nexport function Summary(){\n\n    const {transactions} = useTransactions();\n\n    const summary = transactions.reduce((acc, transaction) => {\n        if(transaction.type === 'deposit'){\n            acc.deposits += transaction.amount;\n            acc.total += transaction.amount;\n        } else{\n            acc.withdraws += transaction.amount;\n            acc.total -= transaction.amount;\n        }\n\n        return acc;\n\n    }, {\n        deposits: 0,\n        withdraws: 0,\n        total: 0,\n    })\n\n    return (\n\n        <Container>\n            <div>\n                <header>\n                    <p>Entradas</p>\n                    <img src={ incomeImg } alt=\"Entradas\"/>\n                </header>\n\n                <strong>\n                    {new Intl.NumberFormat('pt-BR', {\n                        style: 'currency', \n                        currency: 'BRL'}).format(summary.deposits)}\n                </strong>\n\n            </div>\n\n            <div>\n                <header>\n                    <p>Saídas</p>\n                    <img src={ outcomeImg } alt=\"Saídas\"/>\n                </header>\n\n                <strong>-\n                    {new Intl.NumberFormat('pt-BR', {\n                        style: 'currency', \n                        currency: 'BRL'}).format(summary.withdraws)}\n                </strong>\n\n            </div>\n\n            <div className=\"highlight-background\">\n                <header>\n                    <p>Total</p>\n                    <img src={ totalImg } alt=\"Total\"/>\n                </header>\n\n                <strong>\n                    {new Intl.NumberFormat('pt-BR', {\n                        style: 'currency', \n                        currency: 'BRL'}).format(summary.total)}\n                </strong>\n\n            </div>\n\n\n        </Container>\n    );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div ` \n    margin-top: 4rem;\n\n    table {\n        width: 100%;\n        border-spacing: 0 0.5rem;\n\n        th{\n            color: var(--text-body);\n            font-weight: 400;\n            padding: 1rem 2rem;\n            text-align: left;\n            line-height: 1.5rem;\n        }\n\n        td{\n            padding: 1rem 2rem;\n            border: 0;\n            background: var(--shape);\n            color: var(--text-body);\n            border-radius: 0.25rem;\n\n            &.title{\n                color: var(--text-title);\n            }\n\n            &.deposit{\n                color: var(--green);\n            }\n            &.withdraw{\n                color: var(--red);\n            }\n        }\n    }\n`;","import { Container } from \"./styles\";\nimport { useContext } from \"react\";\nimport { useTransactions } from \"../../hooks/useTransactions\";\n\n\nexport function TransactionsTable(){\n    const {transactions} = useTransactions();\n    \n    return (\n        <Container>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Título</th>\n                        <th>Valor</th>\n                        <th>Categoria</th>\n                        <th>Data</th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {transactions.map(transaction => (\n                        <tr key = { transaction.id }>\n                            <td>{ transaction.title }</td>\n\n                            <td className = { transaction.type }>\n                                {new Intl.NumberFormat('pt-BR', {\n                                    style: 'currency', \n                                    currency: 'BRL'}).format(transaction.amount)}\n                            </td>\n\n                            <td>{ transaction.category }</td>\n\n                            <td>\n                                {new Intl.DateTimeFormat('pt-BR').format(new Date(transaction.createdAt))}\n                            </td>\n                        </tr>\n                    ))}\n                   \n                </tbody>\n            </table>\n        </Container>\n    );\n}","import styled from \"styled-components\";\n\nexport const Container = styled.main `\n    max-width: 1120px;\n    margin: 0 auto;\n    padding: 2.5rem 1rem;\n`;","import { Summary } from \"../Summary\";\nimport { TransactionsTable } from \"../TransactionsTable\";\nimport { Container } from \"./styles\";\n\nexport function Dashboard (){\n    return (\n        <Container>\n            <Summary />\n            <TransactionsTable />\n        </Container>\n    );\n}","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components';\n\nexport const Container = styled.header `\n    background: var(--blue);\n\n`;\n\nexport const Content = styled.div `\n    max-width: 1120px;\n    margin: 0 auto;\n\n    padding: 2rem 1rem 12rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    button {\n        font-size: 1rem;\n        color: #fff;\n        background: var(--green);\n        border: 0;\n        padding: 0 2rem;\n        border-radius: 0.25rem;\n        height: 3rem;\n        \n        transition: filter 0.2s;\n\n        &:hover{\n            filter: brightness(0.9);\n        }\n    }\n`;","import logoImg from '../../assets/logo.svg';\nimport { Container, Content } from './styles';\ninterface HeaderProps {\n    onOpenNewTransactionModal: () => void;\n}\n\nexport function Header ({onOpenNewTransactionModal} : HeaderProps){\n\n    return(\n        <Container>\n            <Content>\n            <img src = { logoImg } alt=\"dt money\"/>\n            <button type=\"button\" onClick = { onOpenNewTransactionModal }>\n                Nova transação\n            </button>\n\n            </Content>\n        </Container>\n    );\n}","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle `\n\n    :root {\n        --background: #f0f2f5;\n        --red: #E52E4D;\n        --blue: #5429CC;\n        --green: #33CC95;\n\n        --blue-light: #6933FF;\n\n        --text-title: #363F5F;\n        --text-body: #969CB3;\n\n        --background: #f0f2f5;\n        --shape: #FFFFFF;\n    }\n\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n\n    }\n\n    html{\n        @media (max-width: 1080px){\n            font-size: 93.75%    // 15px\n        }\n\n        @media (max-width: 720px){\n            font-size: 87.5%;   // 14px\n        }\n    }\n\n    body{\n        background: var(---background);\n        -webkit-font-smoothing: antialiased;\n    }\n\n    body, input, textarea, button {\n        font-family: 'Poppins', sans-serif;\n        font-weight: 400;\n    }\n\n    h1,h2,h3,h4,h5,h6, strong{\n        font-weight: 600;\n    }\n\n    button {\n        cursor: pointer;\n    }\n\n    [disabled] {\n        opacity: 0.6;\n        cursor: not-allowed;\n    }\n\n    .react-modal-overlay{\n        background: rgba(0, 0, 0, 0.5);\n\n        position: fixed;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .react-modal-content{\n        width: 100%;\n        max-width: 576px;\n        background: var(--background);\n        padding: 3rem;\n        position: relative;\n        border-radius: 0.25rem;\n\n    }\n\n    .react-modal-close{\n        position: absolute;\n        right: 1.5rem;\n        top: 1.5rem;\n        border: 0;\n        background: transparent;\n        transition: filter 0.2s;\n\n        &:hover{\n            filter: brightness(0.7);\n        }\n    }\n\n\n\n`","import styled from 'styled-components';\nimport { darken, transparentize } from 'polished';\n\nexport const Container = styled.form `\n    h2{\n        color: var(--text-title);\n        font-size: 1.5rem;\n        margin-bottom: 2rem;\n    }\n\n    input{\n        width: 100%;\n        padding: 0 1.5rem;\n        height: 4rem;\n        border-radius: 0.25rem;\n\n        border: 1px solid #d7d7d7;\n        background: #e7e9ee;\n\n        font-weight: 400;\n        font-size: 1rem;\n\n        &::placeholder{\n            color: var(--text-body);\n        }\n\n        & + input {\n            margin-top: 1rem;\n        }\n    }\n\n    button[type = \"submit\"]{\n        width: 100%;\n        padding: 0 1.5rem;\n        height: 4rem;\n        background: var(--green);\n\n        cursor: pointer;\n\n        color: #fff;\n        border-radius: 0.25rem;\n        border: 0;\n        font-size: 1rem;\n        margin-top: 1.5rem;\n        font-weight: 600;\n\n        transition: filter 0.2s;\n\n        &:hover{\n            filter: brightness(0.9);\n        }\n    }\n  \n`;\n\nexport const TransactionTypeContainer = styled.div`\n    margin: 1rem 0;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 0.5rem;\n\n`;\n\ninterface RadioBoxProps {\n    isActive : boolean;\n    activeColor: 'green' | 'red';\n}\n\nconst colors = {\n    green: '#33CC95',\n    red: '#E52E4D'\n}\n\nexport const RadioBox = styled.button<RadioBoxProps> `\n\n    height: 4rem;\n    border: 1px solid #d7d7d7;\n    border-radius: 0.25rem;\n\n    background: ${(props) => props.isActive ? transparentize(0.75, colors[props.activeColor]) : 'transparent'};\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    transition: border-color 0.2s;\n\n    &:hover{\n        border-color: ${ darken(0.1, '#d7d7d7') };\n    }\n\n    img{\n        width: 20px;\n        height: 20px;\n    }\n\n    span{\n        display: inline-block;\n        margin-left: 1rem;\n        font-size: 1rem;\n        color: var(--text-title);\n    }\n\n`;","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import Modal from 'react-modal';\nimport { Container, TransactionTypeContainer, RadioBox } from './styles';\nimport closeImg from '../../assets/close.svg';\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport { FormEvent, useState } from 'react';\nimport { useTransactions } from '../../hooks/useTransactions';\n\ninterface NewTransactionModalProps {\n    isOpen: boolean;\n    onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({ isOpen, onRequestClose }: NewTransactionModalProps){\n\n    const {createTransaction} = useTransactions();\n\n    const [title, setTitle] = useState('');\n    const [amount, setAmount] = useState(0);\n    const [category, setCategory] = useState('');\n    const [type, setType] = useState('deposit');\n\n    async function handleCreateNewTransaction (event: FormEvent){\n        event.preventDefault();\n\n        await createTransaction({\n            title,\n            amount,\n            category,\n            type,\n        })\n\n        setTitle('');\n        setAmount(0);\n        setCategory('');\n        setType('deposit');\n\n        onRequestClose();\n    }\n\n    return (\n        <Modal isOpen = { isOpen } \n            onRequestClose = { onRequestClose } \n            overlayClassName = \"react-modal-overlay\"\n            className = \"react-modal-content\"\n        >\n\n            <button type = \"button\" onClick = { onRequestClose } className = \"react-modal-close\">\n                <img src= { closeImg } alt=\"Fechar modal\"/>\n            </button>\n\n            <Container onSubmit = { handleCreateNewTransaction }>\n                <h2>Cadastrar Transação</h2>\n\n                <input placeholder = \"Título\" value = { title } onChange = { event => setTitle(event.target.value) }/>\n\n                <input type = \"number\" placeholder = \"Preço\" value = { amount } onChange = { event => setAmount(Number(event.target.value)) }/>\n\n                <TransactionTypeContainer>\n\n                    <RadioBox \n                        type = \"button\" \n                        onClick = {() => { setType('deposit') }} \n                        isActive = {type === 'deposit'}\n                        activeColor = 'green'\n                    >\n                        <img src= { incomeImg } alt=\"Entrada\"/>\n                        <span>Entrada</span>\n                    </RadioBox>\n\n                    <RadioBox \n                        type = \"button\" \n                        onClick = {() => { setType('withdraw') }} \n                        isActive = {type === 'withdraw'}\n                        activeColor = 'red'\n                    >\n                        <img src= { outcomeImg } alt=\"Saída\"/>\n                        <span>Saída</span>\n                    </RadioBox>\n\n                </TransactionTypeContainer>\n\n                <input placeholder = \"Categoria\" value = { category } onChange = { event => setCategory(event.target.value) }/>\n\n                <button type=\"submit\">\n                    Cadastrar\n                </button>\n\n\n\n            </Container>\n            \n        </Modal>\n\n    );\n}","import { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { GlobalStyle } from \"./styles/global\";\nimport Modal from 'react-modal';\nimport { useState } from 'react';\nimport { NewTransactionModal } from \"./components/NewTransactionModal\";\nimport { TransactionsProvider } from './hooks/useTransactions';\n\nModal.setAppElement('#root');\n\nexport function App() {\n\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n\n    function handleOpenNewTransactionModal(){\n        setIsNewTransactionModalOpen(true);\n    }\n\n    function handleCloseNewTransactionModal(){\n        setIsNewTransactionModalOpen(false);\n    }\n\n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal = {handleOpenNewTransactionModal} />\n      <Dashboard />\n\n      <NewTransactionModal isOpen = { isNewTransactionModalOpen } onRequestClose = { handleCloseNewTransactionModal }/>\n\n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { createServer, Model } from 'miragejs';\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server){\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: 'Freelance de website',\n          type: 'deposit',\n          category: 'Dev',\n          amount: 6000,\n          createdAt: new Date('2021-02-12 09:00:00')\n        },\n        {\n          id: 2,\n          title: 'Aluguel',\n          type: 'withdraw',\n          category: 'Casa',\n          amount: 1100,\n          createdAt: new Date('2021-02-14 11:00:00')\n        },\n      ]\n    })\n  },\n\n  routes() {\n    this.namespace = 'api';\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction');\n    })\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n\n      return schema.create('transaction', data);\n    })\n\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}